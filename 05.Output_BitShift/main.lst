CCS PCM C Compiler, Version 5.081d, 1               14-Oct-18 16:56
Compiler operating in Evaluation Mode
To obtain a fully enabled compiler visit www.ccsinfo.com/products

               Filename:   C:\Users\ANGICIA\Desktop\PIC\PIC-Microcontroller-using-CCS-Compiler\05.Output_BitShift\main.lst

               ROM used:   60 words (1%)
                           Largest free fragment is 2048
               RAM used:   6 (2%) at main() level
                           7 (2%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   018
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=10 
.................... #use delay(crystal=8MHz,restart_wdt) 
....................  
....................  
.................... #use delay (clock=8000000) 
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   017
000A:  MOVLW  02
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  97
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  DECFSZ 00,F
0016:  GOTO   00A
0017:  RETURN
.................... void main() 
0018:  MOVF   03,W
0019:  ANDLW  1F
001A:  MOVWF  03
001B:  BSF    03.5
001C:  BSF    1F.0
001D:  BSF    1F.1
001E:  BSF    1F.2
001F:  BCF    1F.3
0020:  MOVLW  07
0021:  MOVWF  1C
0022:  BCF    03.7
.................... { 
....................  
....................    while(TRUE) 
....................    { 
....................    output_bit(PIN_B0, (1<<0));  // PORTB Pin 0 to High 
0023:  BCF    03.5
0024:  BSF    06.0
0025:  BSF    03.5
0026:  BCF    06.0
....................    delay_ms(1000);  // Delay of 1s. 
0027:  MOVLW  04
0028:  BCF    03.5
0029:  MOVWF  21
002A:  MOVLW  FA
002B:  MOVWF  22
002C:  CALL   004
002D:  DECFSZ 21,F
002E:  GOTO   02A
....................    output_bit(PIN_B0, (0<<0));  // PORTB Pin 0 to High 
002F:  BCF    06.0
0030:  BSF    03.5
0031:  BCF    06.0
....................    delay_ms(1000);  // Delay of 1s 
0032:  MOVLW  04
0033:  BCF    03.5
0034:  MOVWF  21
0035:  MOVLW  FA
0036:  MOVWF  22
0037:  CALL   004
0038:  DECFSZ 21,F
0039:  GOTO   035
003A:  GOTO   024
....................    } 
....................  
.................... } 
....................  
003B:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT BROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
